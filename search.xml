<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react初体验</title>
      <link href="/2023/03/21/React/"/>
      <url>/2023/03/21/React/</url>
      
        <content type="html"><![CDATA[<h2 id="修改react入口文件"><a href="#修改react入口文件" class="headerlink" title="修改react入口文件"></a>修改react入口文件</h2><p>.找到需要修改入口的文件：path.js<br>node_modules/react_scripts/config/path.js</p><p>修改里面的appIndexPath </p><h2 id="redux-—-仓库管理"><a href="#redux-—-仓库管理" class="headerlink" title="redux — 仓库管理"></a>redux — 仓库管理</h2><ol><li><p>使用redux</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i redux</span><br></pre></td></tr></table></figure></li><li><p>创建仓库 — 使用createStore() 方法创建</p><ul><li><p>引入createStore ，创建仓库，并返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建仓库</span></span><br><span class="line"><span class="comment">//state为仓库的数据---默认是没有初始值（undefined），action为操作仓库数据的方法</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(<span class="function">(<span class="params">state = initVal, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//需要将初始的值进行返回 ---- 默认是undefined</span></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将创建好的仓库进行导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>将仓库中的数据渲染到视图</p><ul><li>获取仓库的数据 — 通过store.getState() 的方式可以拿到仓库的数据</li></ul></li><li><p>修改仓库的数据 — 麻烦的要死</p><p>1.需要通过dispatch函数，将我们需要更改的数据传递给仓库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的type为必传项</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;&quot;</span>, 需要传递的数据&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>action可以接受我们传递的参数，在仓库当中进行逻辑处理进行数据返回</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// action可以拿到我们传递的参数</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(<span class="function">(<span class="params">state = initVal, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//获取时间类型</span></span><br><span class="line">    <span class="keyword">const</span> &#123; eventType &#125; = action;</span><br><span class="line">    <span class="keyword">let</span> newState = &#123; ...state &#125;;</span><br><span class="line">    <span class="comment">//对数据进行处理</span></span><br><span class="line">    <span class="keyword">switch</span> (eventType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;lowcase&quot;</span>: &#123;</span><br><span class="line">            newState.<span class="property">EglishName</span> = newState.<span class="property">EglishName</span>.<span class="title function_">toLocaleLowerCase</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;upcase&quot;</span>: &#123;</span><br><span class="line">            newState.<span class="property">EglishName</span> = newState.<span class="property">EglishName</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;firstName&quot;</span>: &#123;</span><br><span class="line">            newState.<span class="property">chineseName</span> = newState.<span class="property">chineseName</span>.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将加工的值进行返回</span></span><br><span class="line">    <span class="keyword">return</span> newState;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>3.然后通过subscribe可以监听仓库数据的变化，然后通过数据响应式的改变渲染到页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将仓库里面的数据变成响应式数据</span></span><br><span class="line"><span class="keyword">let</span> [state, setState] = <span class="title function_">useState</span>(store.<span class="title function_">getState</span>())</span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置仓库里面最新的数据</span></span><br><span class="line">      <span class="title function_">setState</span>(store.<span class="title function_">getState</span>())</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3><blockquote><p>这种redux是属于旧版的使用 ， 太麻烦了，与useReducer差不多，useReducer是管理单个组件的数据</p><p>而redux是管理整个组件的数据</p><p>可以在其他的组件使用仓库的数据以及更改里面的数据</p></blockquote><h2 id="高阶redux"><a href="#高阶redux" class="headerlink" title="高阶redux"></a>高阶redux</h2><p>下载需要的包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><p>创建一个大的仓库 — 通过<em>configureStore</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入单独的仓库</span></span><br><span class="line"><span class="keyword">import</span> nameStore <span class="keyword">from</span> <span class="string">&quot;./nameStore&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>: &#123;</span><br><span class="line">        nameStore</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>单独初始化每一个仓库</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单独的仓库</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameStore = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="comment">//仓库的名称</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;nameStore&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始的数据</span></span><br><span class="line">    <span class="attr">initialState</span>: &#123;</span><br><span class="line">        <span class="attr">chineseName</span>: <span class="string">&quot;王力宏&quot;</span>,</span><br><span class="line">        <span class="attr">englishName</span>: <span class="string">&quot;wang li hong&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作数据的方法</span></span><br><span class="line">    <span class="attr">reducers</span>: &#123;</span><br><span class="line">        <span class="comment">//英文名字小写的方法</span></span><br><span class="line">        <span class="attr">lowCaseName</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            state.<span class="property">englishName</span> = state.<span class="property">englishName</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//英文名称大写的方法</span></span><br><span class="line">        <span class="attr">upCaseName</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            state.<span class="property">englishName</span> = state.<span class="property">englishName</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//取中文的首字</span></span><br><span class="line">        <span class="attr">firstName</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            state = state.<span class="property">chineseName</span>.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出我们的仓库 ---- 这里是一个坑 不能直接导出仓库，需要导入他的reducer方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> nameStore.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><h3 id="组件中使用"><a href="#组件中使用" class="headerlink" title="组件中使用"></a>组件中使用</h3><ul><li>使用useSelector()的方式使用，接收一个回调函数，第一个参数就是仓库中的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在需要的组件当中导入仓库</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">    <span class="comment">//可以将仓库中的值进行，返回在外面进行接收</span></span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>组件当中修改仓库中的数据，使用<em>useDispatch</em>()生成的dispatch操作</p><ul><li><p>生成dispatch方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//在需要的组件当中导入仓库</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"> <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br></pre></td></tr></table></figure></li><li><p>使用dispatch方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//type为必填项，type的值为当前库的名称+/+需要触发的事件名</span><br><span class="line">dispatch(&#123; type: &quot;nameStore/lowCaseName&quot; &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React 路由学习</title>
      <link href="/2023/03/02/React%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/02/React%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h3><p>在使用react路由之前我们可以先去下载一个npm插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-router-dom -D</span><br></pre></td></tr></table></figure><ul><li><p>创建一个router对象</p><p>使用<em>createBrowserRouter</em>的方式进行创建，结果的返回值就是我们生成的路由表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createBrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将我们生成的路由表进行返回</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createBrowserRouter</span>([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MeauItem</span>&gt;</span><span class="tag">&lt;/<span class="name">MeauItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ContentBox</span>&gt;</span><span class="tag">&lt;/<span class="name">ContentBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li><li><p>将路由表添加到路由组件中，并且添加到根节点中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入路由容器</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;rooter&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterProvider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>使用：+变量的形式 例如：</p><p>这里的id ，id就是变量</p><p>当我们访问任意的该路由时都会返回对应的结果</p><ul><li><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">`/:id == 0`</span>,</span><br><span class="line">       <span class="attr">element</span>: (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>404<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>react使用路由作为组件后，顶层不需要挂载其他的组件</p><p>强行挂载也会报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会报错的</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;rooter&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterProvider</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不报错，但是不会渲染组件</span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;rooter&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">RouterProvider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;rooter&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="补充：原生js实现路由监控"><a href="#补充：原生js实现路由监控" class="headerlink" title="补充：原生js实现路由监控"></a>补充：原生js实现路由监控</h2><h3 id="原生实现hashRouter"><a href="#原生实现hashRouter" class="headerlink" title="原生实现hashRouter"></a>原生实现hashRouter</h3><ul><li>使用hashchange的事件监听路由的变化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有在路由的hash发生变化时触发 </span></span><br><span class="line"> <span class="comment">//添加监听事件</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;hashchange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>使用DOMContentLoaded事件—只会在当初始的 <strong>HTML</strong> 文档被完全加载和解析完成之后触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//获取dom</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;a&quot;</span>).<span class="property">style</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加监听事件</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;hashchange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">changeRouterView</span>()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一开始的时候就会触发</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//获取dom</span></span><br><span class="line">        <span class="title function_">onload</span>();</span><br><span class="line">        <span class="title function_">changeRouterView</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> routerView;</span><br><span class="line">    <span class="comment">//获取路由显示容器，当前的路由信息</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onload</span>(<span class="params"></span>) &#123;</span><br><span class="line">        routerView = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.routerView&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据当前的路由改变路由容器显示的内容（可以封装一个方法，因为除了在加载的时候需要调用，在路由改变的时候也需要调用）</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeRouterView</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//获取路由后面的hash值</span></span><br><span class="line">        <span class="keyword">const</span> hashName = location.<span class="property">hash</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(hashName)</span><br><span class="line">        <span class="comment">//根据hash值来渲染路由</span></span><br><span class="line">        routerView.<span class="property">innerHTML</span> = hashName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="原生js实现historyRouter"><a href="#原生js实现historyRouter" class="headerlink" title="原生js实现historyRouter"></a>原生js实现historyRouter</h3><ul><li><p>使用history.pushState </p><blockquote><p>向当前浏览器会话的历史堆栈中添加一个状态（state）</p><p>如果在同时添加多个，那么里面存储的就是最后一个state的状态</p></blockquote></li><li><p>取消a标签的默认跳转的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;a&quot;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">           item.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="comment">//取消a标签默认的跳转行为</span></span><br><span class="line">               e.<span class="title function_">preventDefault</span>();</span><br><span class="line">               <span class="keyword">let</span> href = e.<span class="property">target</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">               <span class="comment">//添加状态</span></span><br><span class="line">               history.<span class="title function_">pushState</span>(&#123; href &#125;, <span class="string">&quot;路由&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">               <span class="comment">//改变视图</span></span><br><span class="line">               <span class="title function_">changeView</span>();</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></li><li><p>通过pushState添加state状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">pushState</span>(state数据, <span class="string">&quot;路由&quot;</span>, url);</span><br></pre></td></tr></table></figure></li><li><p>在需要的地方可以在history里面拿到state的里面的值</p><p><code>需要注意一下：如果同时push多个state数据，后面的就会覆盖前面的数据</code></p><ul><li><p>React.Children.map</p><blockquote><p>在 <code>children</code> 里的每个直接子节点上调用一个函数，并将 <code>this</code> 设置为 <code>thisArg</code>。如果 <code>children</code> 是一个数组，它将被遍历并为数组中的每个子节点调用该函数。如果子节点为 <code>null</code> 或是 <code>undefined</code>，则此方法将返回 <code>null</code> 或是 <code>undefined</code>，而不会返回数组。</p></blockquote></li></ul><ul><li><p>使用的是react的类组件</p><ol><li>render方法渲染</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渲染</span></span><br><span class="line">   <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">const</span> child = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>;</span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">currentPath:</span> <span class="attr">this.state.currentPath</span>, <span class="attr">onChangeView:</span> <span class="attr">this.onChangeView.bind</span>(<span class="attr">this</span>) &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                   &#123;</span></span><br><span class="line"><span class="language-xml">           //循环child数组，每个项都调用</span></span><br><span class="line"><span class="language-xml">           //返回的内容渲染到页面上</span></span><br><span class="line"><span class="language-xml">                       React.Children.map(child, function (child) &#123;</span></span><br><span class="line"><span class="language-xml">                           // console.log(child)</span></span><br><span class="line"><span class="language-xml">                           return <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">                       &#125;)</span></span><br><span class="line"><span class="language-xml">                   &#125;</span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           &lt;/Provider &gt;</span></span><br><span class="line"><span class="language-xml">       )</span></span><br><span class="line"><span class="language-xml">   &#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>为根组件添加事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件生命周期---挂载的时候调用(改变视图的方法)</span></span><br><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;popstate&quot;</span>, <span class="variable language_">this</span>.<span class="property">onChangeView</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件挂载结束（组件销毁）解绑改变视图的事件</span></span><br><span class="line"> <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;popstate&quot;</span>, <span class="variable language_">this</span>.<span class="property">onChangeView</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        <span class="comment">//跳出一条历史记录</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>将link组件用a标签进行包裹，同时取消a标签的默认事件，添加改变视图，以及添加路由表的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(&#123; onChangeView &#125;) =&gt; (</span><br><span class="line">                       <span class="variable language_">console</span>.<span class="title function_">log</span>(onChangeView), <span class="language-xml"><span class="tag">&lt;<span class="name">b</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">onClick</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                           (<span class="attr">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                               //阻止a标签的默认跳转行为</span></span><br><span class="line"><span class="language-xml">                               e.preventDefault();</span></span><br><span class="line"><span class="language-xml">                               //通过pushState添加</span></span><br><span class="line"><span class="language-xml">                               window.history.pushState(&#123; qqqq: &quot;我是qqqq&quot; &#125;, &quot;&quot;, routto);</span></span><br><span class="line"><span class="language-xml">                               //运行改变视图的方法</span></span><br><span class="line"><span class="language-xml">                               onChangeView();</span></span><br><span class="line"><span class="language-xml">                           &#125;</span></span><br><span class="line"><span class="language-xml">                       &#125;</span></span><br><span class="line"><span class="language-xml">                       &gt;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">                   )</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现原理—–我的思路"><a href="#实现原理—–我的思路" class="headerlink" title="实现原理—–我的思路"></a>实现原理—–我的思路</h3><p>  首先需要明白路由跳转的原理，路由跳转可以通过<strong>a标签</strong>以及l<strong>ocation.href</strong>的方式实现</p><p>，我们可以通过阻止a标签的默认跳转行为，然后我们自己在路由记录当中添加我们需要的路由，通过pushstate的方法可以向路由记录当中<strong>添加state数据</strong>（任意数据），以及给定名称，需要的路由，在<strong>a标签</strong>上我们需要监听他的点击事件，完成添加，以及获取数据做我们想要完成的工作，在<em><strong>初始化的时候</strong></em>，我们需要在window上<strong>添加popstate事件</strong>，当我们的路由发生变化时，我们可以监听到这个事件，这里需要注意，在组件销毁，或者退出时，需要解绑事件。</p></li></ol></li></ul><h3 id="路由通信"><a href="#路由通信" class="headerlink" title="路由通信"></a>路由通信</h3><ul><li>通过search的方法传递数据 —- 在路由后面添加参数</li></ul><p>接收参数 — 使用<em>useSearchParams</em>（）返回一个对象的方式来接收</p><ul><li><p>调用get() 参数名 获取对应的value值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="comment">//第一个参数为路由参数 ， 第二个参数允许我手动修改参数</span></span><br><span class="line"> <span class="keyword">const</span> [searchParams, setSearchParams] = <span class="title function_">useSearchParams</span>();</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;/root?pageSum=50&quot;</span> 路由参数</span><br><span class="line">res.<span class="title function_">get</span>(<span class="string">&quot;pageSum&quot;</span>) <span class="comment">//获取对应的value值</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="编程式导航-—-不使用a标签类型的跳转方式"><a href="#编程式导航-—-不使用a标签类型的跳转方式" class="headerlink" title="编程式导航 —- 不使用a标签类型的跳转方式"></a>编程式导航 —- 不使用a标签类型的跳转方式</h4><ol><li><p>通过onClick点击事件触发跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button style=&#123;&#123; <span class="attr">background</span>: <span class="string">&quot;rgb(24,54,118)&quot;</span> &#125;&#125; onClick=&#123;gotoRoot&#125; className=<span class="string">&#x27;but&#x27;</span>&gt;<span class="variable constant_">ROOT</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编程式导航 --- 返回一个方法</span></span><br><span class="line">   <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">gotoRoot</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   <span class="comment">//方法的第一个参数是需要跳转的路由，第二个参数为一个可选的配置项 replace代表是否让当前的路由替代上一个路由</span></span><br><span class="line">       <span class="title function_">navigate</span>(<span class="string">&quot;/root?pageSum=50&quot;</span>, &#123; <span class="attr">replace</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//第二种 </span></span><br><span class="line">        <span class="title function_">navigate</span>(<span class="number">1</span>); <span class="comment">//路由前进</span></span><br><span class="line">     <span class="title function_">navigate</span>(-<span class="number">1</span>); <span class="comment">//路由后退</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过方法的形式触发</p><p>在函数内部定义一个路由跳转的方法，在需要的时候进行调用</p></li></ol><h3 id="动态路由获取参数"><a href="#动态路由获取参数" class="headerlink" title="动态路由获取参数"></a>动态路由获取参数</h3><ul><li><p>通过useParams()的方法获取 </p><figure class="highlight plaintext"><figcaption><span>**useParams(**)方法返回的是一个对象，这个对象的值就是*动态路由的属性和对应的value值* ，**useSearchParams()**方法返回的是*一个对象和一个方法*，对象是传递的路由参数，方法可以手动设置路由参数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">import &#123; useParams &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line">const params = useParams();</span><br><span class="line">    console.log(params)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="react-dom-router新旧使用的区别"><a href="#react-dom-router新旧使用的区别" class="headerlink" title="react-dom-router新旧使用的区别"></a>react-dom-router新旧使用的区别</h2><ul><li><p>——- <strong>最大的区别</strong>就是导入的方式不一样</p><h1 id="新："><a href="#新：" class="headerlink" title="新："></a>新：</h1><p>通过<em>RouterProvider</em>的方式创建我的跟路由，然后在根路由当中去设置我们导出的路由信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的router就是我们创建的路由信息</span></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;rooter&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">RouterProvider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建路由表使用<em>createBrowserRouter</em>的方式进行创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createBrowserRouter, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createBrowserRouter</span>([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">MeauItem</span>&gt;</span><span class="tag">&lt;/<span class="name">MeauItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ContentBox</span>&gt;</span><span class="tag">&lt;/<span class="name">ContentBox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        ),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/root&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: (<span class="language-xml"><span class="tag">&lt;<span class="name">Root</span>&gt;</span><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/sales&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: (<span class="language-xml"><span class="tag">&lt;<span class="name">Sales</span>&gt;</span><span class="tag">&lt;/<span class="name">Sales</span>&gt;</span></span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/Invoices&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: (<span class="language-xml"><span class="tag">&lt;<span class="name">Invoices</span>&gt;</span><span class="tag">&lt;/<span class="name">Invoices</span>&gt;</span></span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/:city/:smallCity&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: (<span class="language-xml"><span class="tag">&lt;<span class="name">Error</span>&gt;</span>404<span class="tag">&lt;/<span class="name">Error</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="旧："><a href="#旧：" class="headerlink" title="旧："></a>旧：</h1><p>使用<em>BrowserRouter</em>作为根组件进行创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, <span class="title class_">Routes</span>, <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&quot;/<span class="attr">home</span>&quot;&#125;&gt;</span>home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&quot;/<span class="attr">about</span>&quot;&#125;&gt;</span>about<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Routes</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">render</span>=<span class="string">&#123;()</span> =&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>home<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Routes</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">render</span>=<span class="string">&#123;()</span> =&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>about<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>路由表的创建使用useRouter()里面接收一个路由数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">//导入路由数组</span><br><span class="line">import routerArr from &quot;./rooter&quot;</span><br><span class="line"></span><br><span class="line">//路由数组的结构</span><br><span class="line">export default [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &quot;/&quot;,</span><br><span class="line">        element: (</span><br><span class="line">            &lt;div className=&quot;app&quot;&gt;</span><br><span class="line">                &lt;MeauItem&gt;&lt;/MeauItem&gt;</span><br><span class="line">                &lt;ContentBox&gt;&lt;/ContentBox&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        ),</span><br><span class="line">        children: [</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &quot;/root&quot;,</span><br><span class="line">        element: (&lt;Root&gt;&lt;/Root&gt;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &quot;/sales&quot;,</span><br><span class="line">        element: (&lt;Sales&gt;&lt;/Sales&gt;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &quot;/Invoices&quot;,</span><br><span class="line">        element: (&lt;Invoices&gt;&lt;/Invoices&gt;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &quot;/:city/:smallCity&quot;,</span><br><span class="line">        element: (&lt;Error&gt;404&lt;/Error&gt;)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">//生成react.element对象</span><br><span class="line">  const router = useRoutes(routerArr);</span><br><span class="line">  console.log(router);</span><br><span class="line">  //渲染到页面</span><br><span class="line">  return &lt;div className=&#x27;app&#x27;&gt;</span><br><span class="line"></span><br><span class="line">    &#123;router&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><blockquote><p>新的引入方法，在根路由组件中不允许存在其他的组件 </p><p>旧的引入方法，允许在根路由下存在其他组件</p><p>新的引入方法，路由表是通过组件的属性的方式进行逐层下放</p><p>旧的引入的方法是通过创建react.element对象的方式再进行渲染的</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/27/hello-world/"/>
      <url>/2023/02/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
